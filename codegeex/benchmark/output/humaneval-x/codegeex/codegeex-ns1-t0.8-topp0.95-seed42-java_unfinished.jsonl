{"task_id": "Java/115", "prompt": "// language: Java\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n", "generation": "        int height = grid.size();\n        int width = grid.get(0).size();\n\n        boolean[][] visited = new boolean[height][width];\n\n        int[][] visited_index = new int[height][width];\n\n        for (int i = 0; i < height; i++) {\n            for (int j = 0; j < width; j++) {\n                visited_index[i][j] = Integer.MIN_VALUE;\n            }\n        }\n\n        // Initialize the queue\n        PriorityQueue<Integer> queue = new PriorityQueue<>();\n\n        for (int i = 0; i < height; i++) {\n            for (int j = 0; j < width; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    visited_index[i][j] = 0;\n                    queue.add(0);\n                    visited[i][j] = true;\n                }\n            }\n        }\n\n        // Run the DFS\n        while (!queue.isEmpty()) {\n            int level = queue.peek();\n            queue.poll();\n\n            if (level < visited_index[0][0]) {\n                continue;\n            }\n\n            // We reached the bottom of the grid and are now processing the top\n            if (level == visited_index[height - 1][width - 1]) {\n                return level;\n            }\n\n            int row = height - 1;\n            int column = width - 1;\n\n            if (visited_index[row][column] == Integer.MIN_VALUE) {\n                visited_index[row][column] = level;\n            }\n\n            // If we have reached the bottom row and the row above it has less water then we can move in\n            while (row > 0 && (visited_index[row - 1][column] == level || visited_index[row - 1][column] == Integer.MIN_VALUE)) {\n                row--;\n            }\n\n            // If we have reached the top row and the row below it has less water then we can move in\n            while (column > 0 && (visited_index[row][column - 1] == level || visited_index[row][column - 1] == Integer.MIN_VALUE)) {\n                column--;\n            }\n\n            // Move in the direction specified by row & column\n            if (row!= height - 1 && column!= width - 1) {\n                if (grid.get(row).get(column) == 1) {\n                    int bucket_size = Math.min(level, visited_index[row][column] + 1);\n                    int capacity_to_fill = bucket_size * capacity;\n\n                    // Update the visited array\n                    while (capacity_to_fill > 0) {\n                        int level_below = visited_index[row][column + 1];\n                        visited_index[row][column + 1] = level;\n                        capacity_to_fill--;\n\n                        if (level_below == level) {\n                            visited[row][column + 1] = true;\n                        }\n\n                        if (level_below < level && level_below!= Integer.MIN_VALUE) {\n                            level = level_below;\n                        }\n\n                        column++;\n                    }\n\n                    queue.add(level);\n\n                } else {\n                    int bucket_size = Math.min(level, visited_index[row][column] + 1);\n                    int capacity_to_fill = bucket_size * capacity;\n\n                    // Update the visited array\n                    while (capacity_to_fill > 0) {\n                        int level_above = visited_index[row + 1][column];\n                        visited_index[row + 1][column] = level;\n                        capacity_to_fill--;\n\n                        if (level_above == level) {\n                            visited[row + 1][column] = true;\n                        }\n\n                        if (level_above < level && level_above!= Integer.MIN_VALUE) {\n                            level = level_above;\n                        }\n\n                        row++;\n                    }\n\n                    queue.add(level);\n                }\n            }\n\n", "scores": 0.0, "finish": 0, "output": [1003, 3303, 25, 7349, 198, 11748, 20129, 13, 22602, 15885, 26, 198, 11748, 20129, 13, 17204, 15885, 26, 198, 198, 4871, 28186, 1391, 198, 50268, 35343, 198, 50268, 1639, 389, 1813, 257, 36954, 10706, 286, 22571, 13, 5501, 5752, 6870, 257, 2060, 880, 11, 198, 50268, 392, 1123, 352, 287, 257, 5752, 6870, 257, 2060, 4326, 286, 1660, 13, 198, 50268, 10871, 880, 468, 257, 11188, 19236, 326, 460, 307, 973, 284, 7925, 1660, 422, 340, 11, 198, 50268, 392, 477, 38674, 423, 262, 976, 5339, 13, 198, 50268, 7120, 4876, 318, 284, 779, 262, 38674, 284, 6565, 262, 22571, 13, 198, 50268, 26410, 262, 1271, 286, 1661, 345, 761, 284, 2793, 262, 38674, 13, 628, 50268, 16281, 352, 25, 198, 50272, 20560, 25, 198, 50274, 50266, 25928, 1058, 16410, 15, 11, 15, 11, 16, 11, 15, 4357, 685, 15, 11, 16, 11, 15, 11, 15, 4357, 685, 16, 11, 16, 11, 16, 11, 16, 11907, 198, 50274, 50266, 27041, 316, 62, 42404, 1058, 352, 198, 50272, 26410, 25, 718, 628, 50268, 16281, 362, 25, 198, 50272, 20560, 25, 198, 50274, 50266, 25928, 1058, 16410, 15, 11, 15, 11, 16, 11, 16, 4357, 685, 15, 11, 15, 11, 15, 11, 15, 4357, 685, 16, 11, 16, 11, 16, 11, 16, 4357, 685, 15, 11, 16, 11, 16, 11, 16, 11907, 198, 50274, 50266, 27041, 316, 62, 42404, 1058, 362, 198, 50272, 26410, 25, 642, 628, 50268, 16281, 513, 25, 198, 50272, 20560, 25, 198, 50274, 50266, 25928, 1058, 16410, 15, 11, 15, 11, 15, 4357, 685, 15, 11, 15, 11, 15, 11907, 198, 50274, 50266, 27041, 316, 62, 42404, 1058, 642, 198, 50272, 26410, 25, 657, 628, 50268, 3103, 2536, 6003, 25, 198, 50272, 9, 477, 22571, 423, 262, 976, 4129, 198, 50272, 9, 352, 19841, 10706, 13, 13664, 19841, 838, 61, 17, 198, 50272, 9, 352, 19841, 10706, 58, 45299, 16, 4083, 13664, 19841, 838, 61, 17, 198, 50272, 9, 10706, 58, 72, 7131, 73, 60, 4613, 657, 930, 352, 198, 50272, 9, 352, 19841, 5339, 19841, 838, 198, 50269, 16208, 198, 50268, 11377, 493, 3509, 33762, 7, 8053, 27, 8053, 27, 46541, 4211, 10706, 11, 493, 5339, 8, 1391, 198, 50272, 600, 6001, 796, 10706, 13, 7857, 9783, 198, 50272, 600, 9647, 796, 10706, 13, 1136, 7, 15, 737, 7857, 9783, 628, 50272, 2127, 21052, 58, 7131, 60, 8672, 796, 649, 25131, 58, 17015, 7131, 10394, 11208, 628, 50272, 600, 58, 7131, 60, 8672, 62, 9630, 796, 649, 493, 58, 17015, 7131, 10394, 11208, 628, 50272, 1640, 357, 600, 1312, 796, 657, 26, 1312, 1279, 6001, 26, 1312, 29577, 1391, 198, 50274, 50266, 1640, 357, 600, 474, 796, 657, 26, 474, 1279, 9647, 26, 474, 29577, 1391, 198, 50274, 50270, 4703, 863, 62, 9630, 58, 72, 7131, 73, 60, 796, 34142, 13, 23678, 62, 39488, 26, 198, 50274, 50266, 92, 198, 50272, 92, 628, 50272, 1003, 20768, 1096, 262, 16834, 198, 50272, 22442, 414, 34991, 27, 46541, 29, 16834, 796, 649, 34416, 34991, 27, 29, 9783, 628, 50272, 1640, 357, 600, 1312, 796, 657, 26, 1312, 1279, 6001, 26, 1312, 29577, 1391, 198, 50274, 50266, 1640, 357, 600, 474, 796, 657, 26, 474, 1279, 9647, 26, 474, 29577, 1391, 198, 50274, 50270, 361, 357, 25928, 13, 1136, 7, 72, 737, 1136, 7, 73, 8, 6624, 657, 8, 1391, 198, 50274, 50274, 4703, 863, 62, 9630, 58, 72, 7131, 73, 60, 796, 657, 26, 198, 50274, 50274, 36560, 13, 2860, 7, 15, 1776, 198, 50274, 50274, 4703, 863, 58, 72, 7131, 73, 60, 796, 2081, 26, 198, 50274, 50270, 92, 198, 50274, 50266, 92, 198, 50272, 92, 628, 50272, 1003, 5660, 262, 360, 10652, 198, 50272, 4514, 22759, 36560, 13, 271, 40613, 28955, 1391, 198, 50274, 50266, 600, 1241, 796, 16834, 13, 431, 988, 9783, 198, 50274, 50266, 36560, 13, 30393, 9783, 628, 50274, 50266, 361, 357, 5715, 1279, 8672, 62, 9630, 58, 15, 7131, 15, 12962, 1391, 198, 50274, 50270, 43043, 26, 198, 50274, 50266, 92, 628, 50274, 50266, 1003, 775, 4251, 262, 4220, 286, 262, 10706, 290, 389, 783, 7587, 262, 1353, 198, 50274, 50266, 361, 357, 5715, 6624, 8672, 62, 9630, 58, 17015, 532, 352, 7131, 10394, 532, 352, 12962, 1391, 198, 50274, 50270, 7783, 1241, 26, 198, 50274, 50266, 92, 628, 50274, 50266, 600, 5752, 796, 6001, 532, 352, 26, 198, 50274, 50266, 600, 5721, 796, 9647, 532, 352, 26, 628, 50274, 50266, 361, 357, 4703, 863, 62, 9630, 58, 808, 7131, 28665, 60, 6624, 34142, 13, 23678, 62, 39488, 8, 1391, 198, 50274, 50270, 4703, 863, 62, 9630, 58, 808, 7131, 28665, 60, 796, 1241, 26, 198, 50274, 50266, 92, 628, 50274, 50266, 1003, 1002, 356, 423, 4251, 262, 4220, 5752, 290, 262, 5752, 2029, 340, 468, 1342, 1660, 788, 356, 460, 1445, 287, 198, 50274, 50266, 4514, 357, 808, 1875, 657, 11405, 357, 4703, 863, 62, 9630, 58, 808, 532, 352, 7131, 28665, 60, 6624, 1241, 8614, 8672, 62, 9630, 58, 808, 532, 352, 7131, 28665, 60, 6624, 34142, 13, 23678, 62, 39488, 4008, 1391, 198, 50274, 50270, 808, 438, 26, 198, 50274, 50266, 92, 628, 50274, 50266, 1003, 1002, 356, 423, 4251, 262, 1353, 5752, 290, 262, 5752, 2174, 340, 468, 1342, 1660, 788, 356, 460, 1445, 287, 198, 50274, 50266, 4514, 357, 28665, 1875, 657, 11405, 357, 4703, 863, 62, 9630, 58, 808, 7131, 28665, 532, 352, 60, 6624, 1241, 8614, 8672, 62, 9630, 58, 808, 7131, 28665, 532, 352, 60, 6624, 34142, 13, 23678, 62, 39488, 4008, 1391, 198, 50274, 50270, 28665, 438, 26, 198, 50274, 50266, 92, 628, 50274, 50266, 1003, 10028, 287, 262, 4571, 7368, 416, 5752, 1222, 5721, 198, 50274, 50266, 361, 357, 808, 14512, 6001, 532, 352, 11405, 5721, 14512, 9647, 532, 352, 8, 1391, 198, 50274, 50270, 361, 357, 25928, 13, 1136, 7, 808, 737, 1136, 7, 28665, 8, 6624, 352, 8, 1391, 198, 50274, 50274, 600, 19236, 62, 7857, 796, 16320, 13, 1084, 7, 5715, 11, 8672, 62, 9630, 58, 808, 7131, 28665, 60, 1343, 352, 1776, 198, 50274, 50274, 600, 5339, 62, 1462, 62, 20797, 796, 19236, 62, 7857, 1635, 5339, 26, 628, 50274, 50274, 1003, 10133, 262, 8672, 7177, 198, 50274, 50274, 4514, 357, 42404, 62, 1462, 62, 20797, 1875, 657, 8, 1391, 198, 50274, 50274, 50268, 600, 1241, 62, 35993, 796, 8672, 62, 9630, 58, 808, 7131, 28665, 1343, 352, 11208, 198, 50274, 50274, 50268, 4703, 863, 62, 9630, 58, 808, 7131, 28665, 1343, 352, 60, 796, 1241, 26, 198, 50274, 50274, 50268, 42404, 62, 1462, 62, 20797, 438, 26, 628, 50274, 50274, 50268, 361, 357, 5715, 62, 35993, 6624, 1241, 8, 1391, 198, 50274, 50274, 50272, 4703, 863, 58, 808, 7131, 28665, 1343, 352, 60, 796, 2081, 26, 198, 50274, 50274, 50268, 92, 628, 50274, 50274, 50268, 361, 357, 5715, 62, 35993, 1279, 1241, 11405, 1241, 62, 35993, 14512, 34142, 13, 23678, 62, 39488, 8, 1391, 198, 50274, 50274, 50272, 5715, 796, 1241, 62, 35993, 26, 198, 50274, 50274, 50268, 92, 628, 50274, 50274, 50268, 28665, 47253, 198, 50274, 50274, 92, 628, 50274, 50274, 36560, 13, 2860, 7, 5715, 1776, 628, 50274, 50270, 92, 2073, 1391, 198, 50274, 50274, 600, 19236, 62, 7857, 796, 16320, 13, 1084, 7, 5715, 11, 8672, 62, 9630, 58, 808, 7131, 28665, 60, 1343, 352, 1776, 198, 50274, 50274, 600, 5339, 62, 1462, 62, 20797, 796, 19236, 62, 7857, 1635, 5339, 26, 628, 50274, 50274, 1003, 10133, 262, 8672, 7177, 198, 50274, 50274, 4514, 357, 42404, 62, 1462, 62, 20797, 1875, 657, 8, 1391, 198, 50274, 50274, 50268, 600, 1241, 62, 29370, 796, 8672, 62, 9630, 58, 808, 1343, 352, 7131, 28665, 11208, 198, 50274, 50274, 50268, 4703, 863, 62, 9630, 58, 808, 1343, 352, 7131, 28665, 60, 796, 1241, 26, 198, 50274, 50274, 50268, 42404, 62, 1462, 62, 20797, 438, 26, 628, 50274, 50274, 50268, 361, 357, 5715, 62, 29370, 6624, 1241, 8, 1391, 198, 50274, 50274, 50272, 4703, 863, 58, 808, 1343, 352, 7131, 28665, 60, 796, 2081, 26, 198, 50274, 50274, 50268, 92, 628, 50274, 50274, 50268, 361, 357, 5715, 62, 29370, 1279, 1241, 11405, 1241, 62, 29370, 14512, 34142, 13, 23678, 62, 39488, 8, 1391, 198, 50274, 50274, 50272, 5715, 796, 1241, 62, 29370, 26, 198, 50274, 50274, 50268, 92, 628, 50274, 50274, 50268, 808, 47253, 198, 50274, 50274, 92, 628, 50274, 50274, 36560, 13, 2860, 7, 5715, 1776, 198, 50274, 50270, 92, 198, 50274, 50266, 92, 628]}
